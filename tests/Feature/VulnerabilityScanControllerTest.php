<?php

namespace Tests\Feature;

use App\Jobs\VulnerabilityScanJob;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Http\UploadedFile;
use Illuminate\Support\Facades\Queue;
use Illuminate\Support\Facades\Storage;
use Laravel\Passport\Passport;
use Tests\TestCase;

class VulnerabilityScanControllerTest extends TestCase
{
    use RefreshDatabase;

    public function it_uploads_files_and_dispatches_jobs()
    {
        Storage::fake('local');

        Queue::fake();

        $user = User::factory()->create();


        Passport::actingAs($user, ['upload']);

        $file1 = UploadedFile::fake()->create('composer.json', 100);
        $file2 = UploadedFile::fake()->create('docker-compose.yml', 200);

        $response = $this->postJson('/api/upload', [
            'files' => [$file1, $file2]
        ]);

        $response->assertStatus(200);
        $response->assertJson(['message' => 'Files uploaded and vulnerability check initiated!']);

        Storage::disk('local')->assertExists('dependencies/' . $file1->hashName());
        Storage::disk('local')->assertExists('dependencies/' . $file2->hashName());

        Queue::assertPushed(VulnerabilityScanJob::class, 2);

        Queue::assertPushed(function (VulnerabilityScanJob $job) use ($user, $file1) {
            return $job->user->email === $user->email &&
                   $job->fileName === $file1->getClientOriginalName() &&
                   strpos($job->filePath, $file1->hashName()) !== false;
        });

        Queue::assertPushed(function (VulnerabilityScanJob $job) use ($user, $file2) {
            return $job->user->email === $user->email &&
                   $job->fileName === $file2->getClientOriginalName() &&
                   strpos($job->filePath, $file2->hashName()) !== false;
        });
    }

    public function it_returns_an_error_if_no_files_are_uploaded()
    {
        $user = User::factory()->create();

        Passport::actingAs($user, ['upload']);

        $response = $this->postJson('/api/upload', []);

        $response->assertStatus(400);
        $response->assertJson(['error' => 'No files uploaded']);
    }
}
