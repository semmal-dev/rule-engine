<?php
namespace App\Helpers;

use Exception;
use GuzzleHttp\Client; 
use Illuminate\Support\Facades\Log; 

class VulnerabilityScanHelper 
{  
    private $client;
    private $token;
    private $ciUploadId;
    private $fileName;
    private $filePath;
    public $response = [];
    
    /**
     * Method processVulnerabilityCheck
     *
     * @param $filePath $filePath
     * @param $fileName $fileName
     *
     * @return mixed
     */
    public function processVulnerabilityCheck($filePath, $fileName)
    {
        try {
            $this->initializeClient();  
            $this->setFileDetails($filePath, $fileName);
            $this->authenticate();
            $this->uploadFile();
            $this->checkVulnerabilities();
            return $this->response;
        } catch (Exception $e) {
            Log::error('Error in Debricked integration: ' . $e->getMessage());
            return $this->response;
        }
    }
    
    /**
     * Method initializeClient
     *
     * @return void
     */
    private function initializeClient()
    {
        $this->client = new Client();
    }
    
    /**
     * Method setFileDetails
     *
     * @param $filePath $filePath 
     * @param $fileName $fileName 
     *
     * @return void
     */
    private function setFileDetails($filePath, $fileName)
    {
        $this->fileName = $fileName;
        $this->filePath = $filePath;
    }
    
    /**
     * Method authenticate
     *
     * @return void
     */
    private function authenticate()
    {
        $loginResponse = $this->client->post(config('debricked.auth'), [
            'headers' => [
                'Content-Type' => 'application/x-www-form-urlencoded',
            ],
            'form_params' => [
                '_username' => env('DEBRICK_USERNAME'),
                '_password' => env('DEBRICKED_PASSWORD'), 
            ],
        ]);

        $loginBody = json_decode($loginResponse->getBody(), true);
        Log::info('DebrickedHelper::authenticate: RESPONSE.', $loginBody);
        if (isset($loginBody['token'])) {
            $this->token = $loginBody['token'];
        } else {
            Log::error('DebrickedHelper::authenticate: Failed to retrieve token.', $loginBody);
        }
    }
    
    /**
     * Method uploadFile
     *
     * @return void
     */
    private function uploadFile()
    {
        $uploadResponse = $this->client->post(config('debricked.upload'), [
            'headers' => [
                'accept' => '*/*',
                'Authorization' => 'Bearer ' . $this->token,
            ],
            'multipart' => [
                [
                    'name'     => 'commitName',
                    'contents' => 'R1',
                ],
                [
                    'name'     => 'fileData',
                    'contents' => fopen($this->filePath, 'r'), 
                    'filename' => $this->fileName 
                ],
                [
                    'name'     => 'repositoryName',
                    'contents' => 'API',
                ],
            ]
        ]);

        $uploadBody = json_decode($uploadResponse->getBody(), true);

        Log::info('DebrickedHelper::uploadFile: RESPONSE.', $uploadBody);
        if (isset($uploadBody['ciUploadId'])) {
            $this->ciUploadId = $uploadBody['ciUploadId'];
        } else {
            Log::error('DebrickedHelper::uploadFile: Failed to upload file.', $uploadBody);
        }
    }
    
    /**
     * Method checkVulnerabilities
     *
     * @return void
     */
    private function checkVulnerabilities()
    {
        $statusResponse = $this->client->get(config('debricked.status'), [
            'headers' => [
                'accept' => '*/*',
                'Authorization' => 'Bearer ' . $this->token
            ],
            'query' => [
                'ciUploadId' => $this->ciUploadId, 
            ]
        ]);

        $statusBody = json_decode($statusResponse->getBody(), true);
        Log::info('DebrickedHelper::uploadFile: checkVulnerabilities.', $statusBody); 
        if (isset($statusBody['progress'])) {
            $this->response = $statusBody;
        } else {
            Log::error('DebrickedHelper::checkVulnerabilities: Failed to retrieve status.', $statusBody);
        }
    }
}
