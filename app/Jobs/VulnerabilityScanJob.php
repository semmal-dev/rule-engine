<?php

namespace App\Jobs;

use App\Helpers\VulnerabilityScanHelper;
use App\Mail\VulnerabilityNotification;
use Illuminate\Contracts\Queue\ShouldQueue;
use Illuminate\Foundation\Bus\Dispatchable;
use Illuminate\Foundation\Queue\Queueable;
use Illuminate\Queue\InteractsWithQueue;
use Illuminate\Queue\SerializesModels;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Mail;

class VulnerabilityScanJob implements ShouldQueue
{
    use Queueable;

    public $user;
    public $fileName;
    public $filePath;

    /**
     * Create a new job instance.
     */
    public function __construct($user, $fileName, $filePath)
    {
        $this->user = $user;
        $this->fileName = $fileName;
        $this->filePath = $filePath;
    }

    /**
     * Execute the job.
     */
    public function handle(): void
    {
        Log::info("VulnerabilityScanJob started for file: {$this->fileName}");
        $status = (new VulnerabilityScanHelper)->processVulnerabilityCheck($this->filePath, $this->fileName); 
        Log::info("VulnerabilityScanJob started for file: {$this->fileName}");
        $this->notifyUser($status);
    }

    private function notifyUser($status)
    {
        if(isset($status['vulnerabilitiesFound']) && $status['vulnerabilitiesFound'] > 0){
            $message = $status['vulnerabilitiesFound']." Vulnerabilities Detected!";
            if($status['vulnerabilitiesFound'] > 10) {
                $message = "High Vulnerabilities Detected!";
            }
        }

        if(isset($status['progress']) && $status['vulnerabilitiesFound'] == 0){
            if($status['progress'] == 0){
                $message = "Scanning Completed and No Vulnerabilities Detected!";
            }
            if($status['progress'] == 1){
                $message = "Scanning In-Progress!";
            }
        }

        if(!isset($status['progress']) && !isset($status['vulnerabilitiesFound'])){
            $message = "Vulnerabilities Scanning is Failed, Try Again!";
        }

        $this->sendEmail($this->user->email, $message);
    }

    private function sendEmail($to, $subject)
    {
       Mail::to($to)->send(new VulnerabilityNotification($subject));
    }
}
